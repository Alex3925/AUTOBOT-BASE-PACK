const axios = require("axios");

const fontMapping = {
  'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö',
  'H': 'ùóõ', 'I': 'ùóú', 'J': 'ùóù', 'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°',
  'O': 'ùó¢', 'P': 'ùó£', 'Q': 'ùó§', 'R': 'ùó•', 'S': 'ùó¶', 'T': 'ùóß', 'U': 'ùó®',
  'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´', 'Y': 'ùó¨', 'Z': 'ùó≠',
  'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥',
  'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑', 'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª',
  'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ', 'u': 'ùòÇ',
  'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá'
};

function convertToBold(text) {
  return text.replace(/(?:\*\*(.*?)\*\*|## (.*?)|### (.*?))/g, (match, boldText, h2Text, h3Text) => {
    const targetText = boldText || h2Text || h3Text;
    return [...targetText].map(char => fontMapping[char] || char).join('');
  });
}

module.exports.config = {
  name: 'ai',
  version: '1.0.0',
  role: 0,
  hasPrefix: false,
  aliases: ['gemini', 'visionai'],
  description: "Answer questions or analyze images using Gemini AI",
  usage: "ai [question] or reply to an image with caption",
  credits: 'Developer',
  cooldown: 3,
};

module.exports.run = async function({ api, event, args }) {
  const input = args.join(" ").trim();
  const senderId = event.senderID;

  if (!input && !event.messageReply?.attachments?.[0]?.url) {
    return api.sendMessage(
      "‚ùå ùó£ùóøùóºùòÉùó∂ùó±ùó≤ ùóÆ ùóæùòÇùó≤ùòÄùòÅùó∂ùóºùóª ùóºùóø ùóøùó≤ùóΩùóπùòÜ ùòÅùóº ùóÆùóª ùó∂ùó∫ùóÆùó¥ùó≤.",
      event.threadID,
      event.messageID
    );
  }

  const waitMsg = "‚è≥ ùó£ùóøùóºùó∞ùó≤ùòÄùòÄùó∂ùóªùó¥ ùòÑùó∂ùòÅùóµ ùóöùó≤ùó∫ùó∂ùóªùó∂ ùóîùóú...";
  api.sendMessage(waitMsg, event.threadID, (err, info) => {
    if (err) return;

    (async () => {
      try {
        let imageUrl = "";

        if (event.messageReply?.attachments?.[0]?.type === 'photo') {
          imageUrl = event.messageReply.attachments[0].url;
        }

        const { data } = await axios.get("https://kaiz-apis.gleeze.com/api/gemini-vision", {
          params: {
            ask: input || "",
            imagurl: imageUrl || ""
          }
        });

        const result = convertToBold(data.description || "No description returned.");

        const responseMessage = `
AI ASSISTANT 
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
${result}
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ`;

        if (responseMessage.length > 2000) {
          const chunks = splitMessageIntoChunks(responseMessage, 2000);
          for (const chunk of chunks) {
            await new Promise(resolve => setTimeout(resolve, 500));
            api.sendMessage(chunk, event.threadID);
          }
        } else {
          api.editMessage(responseMessage, info.messageID);
        }
      } catch (err) {
        console.error("AI Error:", err.message || err);
        api.editMessage("‚ùå Error: " + (err.message || "Something went wrong."), info.messageID);
      }
    })();
  });
};

function splitMessageIntoChunks(message, chunkSize) {
  const chunks = [];
  for (let i = 0; i < message.length; i += chunkSize) {
    chunks.push(message.slice(i, i + chunkSize));
  }
  return chunks;
}
